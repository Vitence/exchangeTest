<?php
use Phalcon\Mvc\Model\Resultset\Simple as Resultset;
class IndexController extends ControllerBase{

    public function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        if(empty($this->userInfo)){
            self::redirect('/user/login');
        }
    }
    
    //商城
    public function indexAction(){
        //商品列表
        $businessId = $this->request->getQuery('business_id','int',0);
        $obj = new ExCommodity();
        $sql = 'select ec.title,ec.price,eb.name,ec.thumb,c.name as currency from ex_commodity as ec
	LEFT JOIN ex_business as eb ON ec.business_id = eb.id
	LEFT JOIN ex_currency as c ON ec.id = c.commodity_id
where ec.`status` = 0 '.($businessId > 0 ?  'AND ec.business_id = '.$businessId.';' : ';');
        $items = new Resultset(
            null,
            $obj,
            $obj->getReadConnection()->query($sql, null)
        );
        if(!empty($items)){
            $items = $items->toArray();
        }else{
            $items = [];
        }
        $this->view->setVar('items',$items);
    
        //商家列表
        $business = ExBusiness::items();
        if($businessId > 0){
            $busines = ExBusiness::itemById($businessId);
            $this->view->setVar('busines',$busines);
            foreach ($business as $key => $item){
                if($item['id'] == $busines['id']){
                    unset($business[$key]);
                }
            }
        }
        $this->view->setVar('business',$business);
    }
    
    //转入
    public function intoAction(){
        if($this->request->isPost()){
            $token     = $this->request->getPost('token','string','');
            $tokenName = $this->request->getPost('tokenName','string','');
            $imgCode = $this->request->getPost('imgCode','string','');  //图片验证码
            $number = $this->request->getPost('number','string',''); //转出数量
            $card = $this->request->getPost('card','string',''); //银行卡
            $cardName = $this->request->getPost('name','string',''); //开户人
        
            if (!$this->security->checkToken($tokenName,$token)){
                $this->jsonReturn('','1000','页面超时，请刷新页面重试');
            }
        
            $dataToken['tokenName']  = $this->security->getTokenKey();
            $dataToken['token']      = $this->security->getToken();
        
            if (strtolower($imgCode) != $this->session->get('imgCode')){
                $this->jsonReturn($dataToken,'1001','图片验证码错误');
            }
        
            $userInfo = $this->userInfo;
            $user = ExUsers::itemById($userInfo['id']);
        
            //插入转出数据库，待审核，将转出的金调整为锁定状态
            $data['user_id'] = $userInfo['id'];
            $data['number'] = $number;
            $data['total_price'] = $number * 1;
            $data['card_number'] = $card;
            $data['card_name'] = $cardName;
            $data['type'] = 1;
            $data['create_at'] = \Util\common::getDataTime();
            $data['update_at'] = \Util\common::getDataTime();
            $obj = new  ExTransaction();
            ExTransaction::addData($obj,$data);
            $this->jsonReturn('');
        }
        $imgCode = \Util\common::getCaptcha();
        $this->session->set('imgCode',$imgCode['code']);
        $this->view->setVar('codeUrl',$imgCode['codeUrl']);
    }
    public function intoSuccessAction(){
    
    }
    //转出
    public function outAction(){
        if($this->request->isPost()){
            $token     = $this->request->getPost('token','string','');
            $tokenName = $this->request->getPost('tokenName','string','');
            $name = $this->request->getPost('name','string',''); //姓名
            $cardNumberr = $this->request->getPost('cardNumber','string',''); //身份证号
            $imgCode = $this->request->getPost('imgCode','string','');  //图片验证码
            $number = $this->request->getPost('number','string',''); //转出数量
            $payPassword = $this->request->getPost('payPassword','string',''); //交易密码
            $card = $this->request->getPost('card','string',''); //银行卡
            $cardName = $this->request->getPost('name','string',''); //开户人
            $cardOpen = $this->request->getPost('name','string',''); //开户行
    
            if (!$this->security->checkToken($tokenName,$token)){
                $this->jsonReturn('','1000','页面超时，请刷新页面重试');
            }
    
            $dataToken['tokenName']  = $this->security->getTokenKey();
            $dataToken['token']      = $this->security->getToken();
    
            if (strtolower($imgCode) != $this->session->get('imgCode')){
                $this->jsonReturn($dataToken,'1001','图片验证码错误');
            }
            
            $userInfo = $this->userInfo;
            $user = ExUsers::itemById($userInfo['id']);
            $checkPassword = UserLogic::checkTradingPassword($user, $payPassword);
            if(!$checkPassword){
                $this->jsonReturn($dataToken,'1007','交易密码错误');
            }
    
            if($user['balance'] < $number){
                $this->jsonReturn($dataToken,'1030','余额不足');
            }
            //插入转出数据库，待审核，将转出的金调整为锁定状态
            $data['user_id'] = $userInfo['id'];
            $data['name'] = $name;
            $data['user_card'] = $cardNumberr;
            $data['number'] = $number;
            $data['total_price'] = $number * 0.99;
            $data['card_number'] = $card;
            $data['card_name'] = $cardName;
            $data['card_open'] = $cardOpen;
            $data['type'] = 2;
            $data['create_at'] = \Util\common::getDataTime();
            $data['update_at'] = \Util\common::getDataTime();
            $obj = new  ExTransaction();
            ExTransaction::addData($obj,$data);
            $where['id'] = $user['id'];
            $userData['balance'] = $user['balance'] - $number;
            $userData['trad_balance'] = $user['trad_balance'] + $number;
            ExUsers::updataData($where,$userData);
            $user = ExUsers::itemById($userInfo['id']);
            self::saveSession($user);
            $this->jsonReturn('');
        }
        $imgCode = \Util\common::getCaptcha();
        $this->session->set('imgCode',$imgCode['code']);
        $this->view->setVar('codeUrl',$imgCode['codeUrl']);
    }
    public function outSuccessAction(){
    
    }
    //资产详情
    public function assetsAction(){
        $user = $this->userInfo;
        $items = ExExchangeRecord::itemsByUserId($user['id']);
        $currencyId = array_column($items,'currency_id');
        $types = ExCurrency::itemsByIdArr($currencyId);
        $types = array_column($types,null,'id');
        $user = ExUsers::itemById($user['id']);
        foreach ($items as &$item){
            $item['name'] = $types[$item['currency_id']]['name'];
            $newPrice = ExOrder::getMaxOrderPrice($item['currency_id']);
            if($newPrice){
                $newPrice = $newPrice->toArray();
                if(!empty($newPrice)){
                    $item['newPrice'] = $newPrice['price'];
                }else{
                    $item['newPrice'] = 0;
                }
            }else{
                $item['newPrice'] = 0;
            }
        }
        foreach ($items as &$val){
            if($val['newPrice'] <= 0){
                $val['newPrice'] = $types[$val['currency_id']]['init_price'];
            }
        }
        $this->view->setVar('items',$items);
        $this->view->setVar('user',$user);
    }
    
    //兑换记录
    public function exchangeAction(){
        //商家列表
        $business = ExBusiness::items();
        $this->view->setVar('business',$business);
    }
    
    public function getExchangeAction(){
        $buinessId = $this->request->getQuery('business_id');
        $startTime = $this->request->getQuery('start_time');
        $endTime   = $this->request->getQuery('end_time');
        $pageAt = $this->request->getQuery('page_at','int',1);
        $pageSize = $this->request->getQuery('page_size','int',10);
        $where = '1 = 1';
        if($startTime != '' && $endTime != ''){
            $where .= " AND ExExchange.create_at >= '$startTime 00:00:01' AND  ExExchange.create_at <= '$endTime 23:59:59'";
        }
        if($buinessId > 0){
            $where .= " AND ExExchange.business_id = ".$buinessId;
        }
        $column = 'ExExchange.create_at,ExExchange.price,ExExchange.number,ExExchange.total_price,ExBusiness.name,ExCommodity.title';
        $builder =  (new ExExchange())->getModelsManager()->createBuilder()
            ->from('ExExchange')
            ->leftJoin("ExBusiness","ExBusiness.id=ExExchange.business_id")
            ->leftJoin("ExCommodity","ExCommodity.id=ExExchange.commodity_id")
            ->andWhere($where)
            ->columns($column);
        $paginator = new \Phalcon\Paginator\Adapter\QueryBuilder(array("builder" =>$builder, "limit" => $pageSize, "page" => $pageAt));
        $result    = $paginator->getPaginate();
        $list      = $result->items->toArray();
        if(!empty($list)){
            foreach ($list as &$item){
                $item['create_at'] = date("Y/m/d H:i",strtotime($item['create_at']));
            }
        }else{
            $list  = [];
        }
    
        $totalNum  = $result->total_items;
        $totalPage = ceil($totalNum / $pageSize);
        $return    = [
            'currentPage' => $pageAt,
            'totalNum'    => $totalNum,
            'totalPage'   => $totalPage,
            'list'        => $list
        ];
        $this->jsonReturn($return);
    }
    
    //转入转出记录
    public function orderAction(){
    
    }
    public function getOrderAction(){
        $type = $this->request->getQuery('type','int',0); //1转入 2转出
        $startTime = $this->request->getQuery('start_time','string','');
        $endTime   = $this->request->getQuery('end_time','string','');
        $pageAt = $this->request->getQuery('page_at','int',1);
        $pageSize = $this->request->getQuery('page_size','int',10);
        $where = 'ExTransaction.status = 1';
        if($startTime != '' && $endTime != ''){
            $where .= " AND ExTransaction.examine_at >= '$startTime 00:00:01' AND  ExTransaction.examine_at <= '$endTime 23:59:59'";
        }
        if($type > 0){
            $where .= " AND ExTransaction.type = ".$type;
        }
        $column = 'ExTransaction.examine_at,ExTransaction.type,ExTransaction.number';
        $builder =  (new ExTransaction())->getModelsManager()->createBuilder()
            ->from('ExTransaction')
            ->andWhere($where)
            ->columns($column);
        $paginator = new \Phalcon\Paginator\Adapter\QueryBuilder(array("builder" =>$builder, "limit" => $pageSize, "page" => $pageAt));
        $result    = $paginator->getPaginate();
        $list      = $result->items->toArray();
        if(!empty($list)){
            foreach ($list as &$item){
                $item['examine_at'] = date("Y/m/d H:i",strtotime($item['examine_at']));
            }
        }else{
            $list  = [];
        }
    
        $totalNum  = $result->total_items;
        $totalPage = ceil($totalNum / $pageSize);
        $return    = [
            'currentPage' => $pageAt,
            'totalNum'    => $totalNum,
            'totalPage'   => $totalPage,
            'list'        => $list
        ];
        $this->jsonReturn($return);
    }
    //登录密码修改
    public function setLoginPassAction(){
        if($this->request->isPost()){
            $userInfo = $this->userInfo;
        
            $token     = $this->request->getPost('token','string','');
            $tokenName = $this->request->getPost('tokenName','string','');
            if (!$this->security->checkToken($tokenName,$token)){
                $this->jsonReturn('','1000','页面超时，请刷新页面重试');
            }
        
            $dataToken['tokenName']  = $this->security->getTokenKey();
            $dataToken['token']      = $this->security->getToken();
        
            $oldPass  = $this->request->getPost('oldPass','string','');
        
            $checkPassword = UserLogic::checkPassword($userInfo, $oldPass);
            if(!$checkPassword){
                $this->jsonReturn($dataToken,'1007','原始登录密码错误');
            }
        
            $password  = $this->request->getPost('password','string','');
        
            if(!\Util\Check::verifyPassword($password)){
                $this->jsonReturn($dataToken,'1003','密码格式错误');
            }
        
            $save  = ExUsers::saveUserPassword($userInfo['id'],$password);
            if ($save){
                self::deleteSession();
                $this->jsonReturn($dataToken);
            } else{
                $this->jsonReturn($dataToken,'1008','修改失败，请重试');
            }
        }
    }
    //交易密码修改
    public function setTradingPassAction(){
        if($this->request->isPost()){
            $userInfo = $this->userInfo;
        
            $token     = $this->request->getPost('token','string','');
            $tokenName = $this->request->getPost('tokenName','string','');
            if (!$this->security->checkToken($tokenName,$token)){
                $this->jsonReturn('','1000','页面超时，请刷新页面重试');
            }
        
            $dataToken['tokenName']  = $this->security->getTokenKey();
            $dataToken['token']      = $this->security->getToken();
        
            $oldPass  = $this->request->getPost('oldPass','string','');
        
            $checkPassword = UserLogic::checkTradingPassword($userInfo, $oldPass);
            if(!$checkPassword){
                $this->jsonReturn($dataToken,'1007','原始交易密码错误');
            }
        
            $password  = $this->request->getPost('password','string','');
            $save  = ExUsers::saveTradingPassword($userInfo['id'],$password);
        
            if ($save){
                $this->jsonReturn($dataToken);
            } else{
                $this->jsonReturn($dataToken,'1008','修改失败，请重试');
            }
        }
        $userInfo = $this->userInfo;
        $user = ExUsers::itemById($userInfo['id']);
        $this->view->setVar('user',$user);
    }
    //身份认证
    public function authenticationAction(){
        if($this->request->isPost()){
            $token     = $this->request->getPost('token','string','');
            $tokenName = $this->request->getPost('tokenName','string','');
            $name = $this->request->getPost('name','string',''); //姓名
            $cardNumberr = $this->request->getPost('cardNumber','string',''); //身份证号
            if (!$this->security->checkToken($tokenName,$token)){
                $this->jsonReturn('','1000','页面超时，请刷新页面重试');
            }
    
            $dataToken['tokenName']  = $this->security->getTokenKey();
            $dataToken['token']      = $this->security->getToken();
    
            $userInfo = $this->userInfo;
            $files = $this->request->getUploadedFiles();
            $arr = [];
            foreach ($files as $file){
                $fileName = '/public/upload/'.$userInfo['id'];
                $dir  = APP_PATH.$fileName;
                if(!file_exists($dir)){
                    mkdir ($dir,0777,true);
                }
                $dir = $dir.'/'.time().$file->getName();
                $file->moveTo($dir);
                $arr[] = $fileName;
            }
            $auth = ExAuthentication::findRow(array('user_id'=>$userInfo['id']));
            if($auth){
                $auth = $auth->toArray();
                if(!empty($auth) && $auth['status'] != 4){
                    $this->jsonReturn('','1000','页面超时，请刷新页面重试');
                }
            }
            $data['user_id'] = $userInfo['id'];
            $data['name'] = $name;
            $data['card_number'] = $cardNumberr;
            $data['card_just'] = $arr[0];
            $data['card_back'] = $arr[1];
            $data['card_hand'] = $arr[2];
            $data['create_at'] = \Util\common::getDataTime();
            $data['update_at'] = \Util\common::getDataTime();
            $obj = new ExAuthentication();
            ExAuthentication::addData($obj,$data);
            $this->jsonReturn('');
        }
        $userInfo = $this->userInfo;
        $auth = ExAuthentication::findRow(array('user_id'=>$userInfo['id']));
        if($auth){
            $auth = $auth->toArray();
            if(!empty($auth)){
                if($auth['status'] == 3){
                    self::redirect('/index/authenticationing');
                }else if($auth['status'] == 2){
                    self::redirect('/index/authenticationFaile');
                }else if($auth['status'] == 1){
                    self::redirect('/index/authenticationSuccess');
                }
            }
        }
    }
    public function authenticationingAction(){
    
    }
    public function authenticationSuccessAction(){
    
    }
    public function authenticationFaileAction(){
    
    }
    //补充信息
    public function completeAction(){
        if($this->request->isPost()){
            $token     = $this->request->getPost('token','string','');
            $tokenName = $this->request->getPost('tokenName','string','');
            $name = $this->request->getPost('name','string',''); //姓名
            $imgCode = $this->request->getPost('imgCode','string','');  //图片验证码
            $card = $this->request->getPost('card','string',''); //银行卡
            $cardName = $this->request->getPost('cardName','string',''); //开户人
            $cardOpen = $this->request->getPost('cardOpen','string',''); //开户行
            $phone = $this->request->getPost('phone','string','');
            $userInfo = $this->userInfo;
    
            if (!$this->security->checkToken($tokenName,$token)){
                $this->jsonReturn('','1000','页面超时，请刷新页面重试');
            }
    
            $dataToken['tokenName']  = $this->security->getTokenKey();
            $dataToken['token']      = $this->security->getToken();
    
            if (strtolower($imgCode) != $this->session->get('imgCode')){
                $this->jsonReturn($dataToken,'1001','图片验证码错误');
            }
            
            $data['name'] = $name;
            $data['phone'] = $phone;
            $data['card_name'] = $cardName;
            $data['card_number'] = $card;
            $data['card_open'] = $cardOpen;
            ExUsers::saveDataById($userInfo['id'],$data);
            $this->jsonReturn('');
        }
        $userInfo = $this->userInfo;
        $user = ExUsers::itemById($userInfo['id']);
        $imgCode = \Util\common::getCaptcha();
        $this->session->set('imgCode',$imgCode['code']);
        $this->view->setVar('codeUrl',$imgCode['codeUrl']);
        $this->view->setVar('user',$user);
    }
}